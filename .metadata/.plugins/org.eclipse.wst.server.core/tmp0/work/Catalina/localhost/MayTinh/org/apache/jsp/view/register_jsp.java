/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.17
 * Generated at: 2024-04-17 12:30:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("  <title>Register Form</title>\r\n");
      out.write("  <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,700' rel='stylesheet' type='text/css'>\r\n");
      out.write("  <link href='https://fonts.googleapis.com/css?family=Sofia' rel='stylesheet' type='text/css'>\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.css\">\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\">\r\n");
      out.write("  <style>\r\n");
      out.write("    /* CSS styles */\r\n");
      out.write("    body {\r\n");
      out.write("      background: #2E3740;\r\n");
      out.write("      color: #435160;\r\n");
      out.write("      font-family: 'Open Sans', sans-serif;\r\n");
      out.write("      margin: 0;\r\n");
      out.write("      padding: 0;\r\n");
      out.write("      display: flex;\r\n");
      out.write("      justify-content: center;\r\n");
      out.write("      align-items: center;\r\n");
      out.write("      height: 100vh;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .container {\r\n");
      out.write("      width: 350px;\r\n");
      out.write("      background-color: #ffffff;\r\n");
      out.write("      padding: 30px;\r\n");
      out.write("      border-radius: 10px;\r\n");
      out.write("      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    h2 {\r\n");
      out.write("      text-align: center;\r\n");
      out.write("      font-family: 'Sofia', cursive;\r\n");
      out.write("      color: #6D7781;\r\n");
      out.write("      margin-bottom: 20px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    input[type=\"text\"],\r\n");
      out.write("    input[type=\"password\"] {\r\n");
      out.write("      width: 100%;\r\n");
      out.write("      padding: 15px;\r\n");
      out.write("      margin-bottom: 20px;\r\n");
      out.write("      border: none;\r\n");
      out.write("      border-bottom: 1px solid #ccc;\r\n");
      out.write("      background-color: #f8f8f8;\r\n");
      out.write("      font-size: 16px;\r\n");
      out.write("      color: #555;\r\n");
      out.write("      outline: none;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    input[type=\"password\"] {\r\n");
      out.write("      position: relative;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .show-password-icon {\r\n");
      out.write("      position: absolute;\r\n");
      out.write("      right: 10px;\r\n");
      out.write("      top: 50%;\r\n");
      out.write("      transform: translateY(-50%);\r\n");
      out.write("      cursor: pointer;\r\n");
      out.write("      color: #ccc;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    input[type=\"checkbox\"] {\r\n");
      out.write("      display: none;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    label {\r\n");
      out.write("      position: absolute;\r\n");
      out.write("      right: 0;\r\n");
      out.write("      bottom: 10px;\r\n");
      out.write("      transform: translateX(100%);\r\n");
      out.write("      font-size: 14px;\r\n");
      out.write("      color: #555;\r\n");
      out.write("      cursor: pointer;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    input[type=\"submit\"] {\r\n");
      out.write("      width: 100%;\r\n");
      out.write("      padding: 15px;\r\n");
      out.write("      border: none;\r\n");
      out.write("      background-color: #1FCE6D;\r\n");
      out.write("      color: #fff;\r\n");
      out.write("      font-size: 16px;\r\n");
      out.write("      font-weight: bold;\r\n");
      out.write("      border-radius: 5px;\r\n");
      out.write("      cursor: pointer;\r\n");
      out.write("      transition: background-color 0.3s ease;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    input[type=\"submit\"]:hover {\r\n");
      out.write("      background-color: #16aa56;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .forgot {\r\n");
      out.write("      text-align: center;\r\n");
      out.write("      margin-top: 20px;\r\n");
      out.write("      color: #555;\r\n");
      out.write("      font-size: 14px;\r\n");
      out.write("      text-decoration: none;\r\n");
      out.write("      display: block;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .forgot:hover {\r\n");
      out.write("      color: #6D7781;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .agree {\r\n");
      out.write("      margin-top: 20px;\r\n");
      out.write("      display: flex;\r\n");
      out.write("      align-items: center;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .agree input[type=\"checkbox\"] + label {\r\n");
      out.write("      margin-right: 5px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .agree label {\r\n");
      out.write("      font-size: 14px;\r\n");
      out.write("      color: #555;\r\n");
      out.write("    }\r\n");
      out.write("  </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <input type=\"hidden\" id=\"status\" value=\"");
      out.print( request.getAttribute("status") );
      out.write("\">\r\n");
      out.write("  <div class=\"container\">\r\n");
      out.write("    <h2>Register</h2>\r\n");
      out.write("    <form id=\"registerForm\" action=\"Register\" method=\"post\" onsubmit=\"return validateForm()\">\r\n");
      out.write("      <input type=\"text\" name=\"email\" id=\"email\" placeholder=\"Email Address\">\r\n");
      out.write("      <input id=\"pw\" type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\">\r\n");
      out.write("      <input type=\"password\" name=\"repass\" id=\"repass\" placeholder=\"Repeat Password\">\r\n");
      out.write("      <input type=\"checkbox\" id=\"showPass\" onclick=\"togglePassVisibility()\">\r\n");
      out.write("      <input type=\"submit\" value=\"Register\">\r\n");
      out.write("    </form>\r\n");
      out.write("   <p> <a href=\"Login\" class=\"link-info\">Go back to login</a>\r\n");
      out.write("  </div>\r\n");
      out.write("\r\n");
      out.write("  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js\"></script>\r\n");
      out.write("  <script type=\"text/javascript\">\r\n");
      out.write("  function togglePassVisibility() {\r\n");
      out.write("    var repassInput = document.getElementById(\"repass\");\r\n");
      out.write("    if (repassInput.type === \"password\") {\r\n");
      out.write("      repassInput.type = \"text\";\r\n");
      out.write("    } else {\r\n");
      out.write("      repassInput.type = \"password\";\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function validateForm() {\r\n");
      out.write("    var email = document.getElementById(\"email\").value;\r\n");
      out.write("    var password = document.getElementById(\"pw\").value;\r\n");
      out.write("    var repass = document.getElementById(\"repass\").value;\r\n");
      out.write("\r\n");
      out.write("    if (email.trim() === \"\" || password.trim() === \"\" || repass.trim() === \"\") {\r\n");
      out.write("      swal(\"Error\", \"Please fill in all fields\", \"error\");\r\n");
      out.write("      return false;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    if (password !== repass) {\r\n");
      out.write("      swal(\"Error\", \"Passwords do not match\", \"error\");\r\n");
      out.write("      return false;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    return true;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  var status = document.getElementById(\"status\").value;\r\n");
      out.write("  if (status == \"success\") {\r\n");
      out.write("    swal({\r\n");
      out.write("      title: \"Congrats\",\r\n");
      out.write("      text: \"Account Created Successfully\",\r\n");
      out.write("      icon: \"success\",\r\n");
      out.write("      button: \"OK\",\r\n");
      out.write("    }).then((value) => {\r\n");
      out.write("      if (value) {\r\n");
      out.write("        window.location.href = \"Login\"; \r\n");
      out.write("      }\r\n");
      out.write("    });\r\n");
      out.write("  }\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
